/*
Copyright (c) 2019-2020 Timur Gafarov
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dagon.ext.newton;

import std.stdio;
import std.string;
import std.conv;
import std.math;
import dlib.core.ownership;
import dlib.core.memory;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.quaternion;
import dlib.math.utils;
import dagon.core.event;
import dagon.core.time;
import dagon.graphics.mesh;
import dagon.graphics.entity;
public import bindbc.newton;

extern(C)
{
    nothrow @nogc void newtonBodyForceCallback(
        const NewtonBody* nbody,
        dFloat timestep,
        int threadIndex)
    {
        NewtonRigidBody b = cast(NewtonRigidBody)NewtonBodyGetUserData(nbody);
        if (b)
        {
            Vector3f gravityForce = b.gravity * b.mass;
            NewtonBodyAddForce(nbody, gravityForce.arrayof.ptr);
            NewtonBodyAddForce(nbody, b.force.arrayof.ptr);
            NewtonBodyAddTorque(nbody, b.torque.arrayof.ptr);
            b.force = Vector3f(0.0f, 0.0f, 0.0f);
            b.torque = Vector3f(0.0f, 0.0f, 0.0f);
        }
    }

    dFloat newtonWorldRayFilterCallback(
        const NewtonBody* nbody,
        const NewtonCollision* shapeHit,
        const dFloat* hitContact,
        const dFloat* hitNormal,
        dLong collisionID,
        void* userData,
        dFloat intersectParam)
    {
        NewtonRaycaster raycaster = cast(NewtonRaycaster)userData;
        NewtonRigidBody b = cast(NewtonRigidBody)NewtonBodyGetUserData(nbody);
        if (raycaster && b)
        {
            Vector3f p = Vector3f(hitContact[0], hitContact[1], hitContact[2]);
            Vector3f n = Vector3f(hitNormal[0], hitNormal[1], hitNormal[2]);
            raycaster.onRayHit(b, p, n);
        }
        return 1.0f;
    }

    uint newtonWorldRayPrefilterCallback(
        const NewtonBody* nbody,
        const NewtonCollision* collision,
        void* userData)
    {
        return 1;
    }
    
    void newtonSensorContactsProcess(
        const NewtonJoint* contactJoint,
        dFloat timestep,
        int threadIndex)
    {
        void* nextContact;
        uint numContacts = 0;
        for (void* contact = NewtonContactJointGetFirstContact(contactJoint); contact; contact = nextContact)
        {
            nextContact = NewtonContactJointGetNextContact(contactJoint, contact);
            NewtonContactJointRemoveContact(contactJoint, contact);
            numContacts++;
        }
        
        if (numContacts)
        {
            NewtonBody* b0 = NewtonJointGetBody0(contactJoint);
            NewtonBody* b1 = NewtonJointGetBody1(contactJoint);
            NewtonRigidBody body0 = cast(NewtonRigidBody)NewtonBodyGetUserData(b0);
            NewtonRigidBody body1 = cast(NewtonRigidBody)NewtonBodyGetUserData(b1);
            
            if (body0 && body0.isSensor)
            {
                body0.onCollision(body1);
            }
            else if (body1 && body1.isSensor)
            {
                body1.onCollision(body0);
            }
        }
    }
    
    int newtonSensorOnAABBOverlapCallback(
        const NewtonJoint* contact, 
        dFloat timestep,
        int threadIndex)
    {
        return 1;
    }
    
    int newtonSensorOnAABBOverlapCancelCallback(
        const NewtonJoint* contact, 
        dFloat timestep,
        int threadIndex)
    {
        return 0;
    }
}

interface NewtonRaycaster
{
    void onRayHit(NewtonRigidBody nbody, Vector3f hitPoint, Vector3f hitNormal);
}

class NewtonPhysicsWorld: Owner
{
    NewtonWorld* newtonWorld;
    int defaultGroupId;
    int kinematicGroupId;
    int sensorGroupId;

    this(Owner o)
    {
        super(o);
        newtonWorld = NewtonCreate();
        defaultGroupId = NewtonMaterialGetDefaultGroupID(newtonWorld);
        kinematicGroupId = createGroupId();
        sensorGroupId = createGroupId();
        NewtonMaterialSetDefaultElasticity(newtonWorld, defaultGroupId, kinematicGroupId, 0.0f);
        NewtonMaterialSetDefaultFriction(newtonWorld, defaultGroupId, kinematicGroupId, 0.5f, 0.0f);
        NewtonMaterialSetCollisionCallback(newtonWorld, sensorGroupId, defaultGroupId, null, &newtonSensorContactsProcess);
        NewtonMaterialSetCollisionCallback(newtonWorld, kinematicGroupId, sensorGroupId, &newtonSensorOnAABBOverlapCancelCallback, null);
    }
    
    int createGroupId()
    {
        return NewtonMaterialCreateGroupID(newtonWorld);
    }

    void loadPlugins(string dir)
    {
        NewtonLoadPlugins(newtonWorld, dir.toStringz);
        void* p = NewtonGetPreferedPlugin(newtonWorld);
        writeln("Selected plugin: ", NewtonGetPluginString(newtonWorld, p).to!string);
    }

    void update(double dt)
    {
        NewtonUpdate(newtonWorld, dt);
    }

    NewtonRigidBody createDynamicBody(NewtonCollisionShape shape, float mass)
    {
        NewtonRigidBody b = New!NewtonRigidBody(shape, mass, this, this);
        // TODO: store a list of bodies
        return b;
    }

    NewtonRigidBody createStaticBody(NewtonCollisionShape shape)
    {
        return createDynamicBody(shape, 0.0f);
    }

    void raycast(Vector3f pstart, Vector3f pend, NewtonRaycaster raycaster)
    {
        NewtonWorldRayCast(newtonWorld, pstart.arrayof.ptr, pend.arrayof.ptr, &newtonWorldRayFilterCallback, cast(void*)raycaster, &newtonWorldRayPrefilterCallback, 0);
    }

    ~this()
    {
        NewtonMaterialDestroyAllGroupID(newtonWorld);
        NewtonDestroyAllBodies(newtonWorld);
        NewtonDestroy(newtonWorld);
    }
}

abstract class NewtonCollisionShape: Owner
{
    NewtonPhysicsWorld world;
    NewtonCollision* newtonCollision;

    this(NewtonPhysicsWorld world)
    {
        super(world);
        this.world = world;
    }

    ~this()
    {
        if (newtonCollision)
            NewtonDestroyCollision(newtonCollision);
    }
    
    void setTransformation(Matrix4x4f m)
    {
        if (newtonCollision)
            NewtonCollisionSetMatrix(newtonCollision, m.arrayof.ptr);
    }
}

class NewtonBoxShape: NewtonCollisionShape
{
    Vector3f halfSize;

    this(Vector3f extents, NewtonPhysicsWorld world)
    {
        super(world);
        newtonCollision = NewtonCreateBox(world.newtonWorld, extents.x, extents.y, extents.z, 0, null);
        NewtonCollisionSetUserData(newtonCollision, cast(void*)this);
        halfSize = extents * 0.5f;
    }
}

class NewtonSphereShape: NewtonCollisionShape
{
    float radius;

    this(float radius, NewtonPhysicsWorld world)
    {
        super(world);
        this.radius = radius;
        newtonCollision = NewtonCreateSphere(world.newtonWorld, radius, 0, null);
        NewtonCollisionSetUserData(newtonCollision, cast(void*)this);
    }
}

class NewtonMeshShape: NewtonCollisionShape
{
    this(Mesh mesh, NewtonPhysicsWorld world)
    {
        super(world);
        NewtonMesh* nmesh = NewtonMeshCreate(world.newtonWorld);
        NewtonMeshBeginBuild(nmesh);
        foreach(face; mesh.indices)
        foreach(i; face)
        {
            Vector3f p = mesh.vertices[i];
            Vector3f n = mesh.normals[i];
            NewtonMeshAddPoint(nmesh, p.x, p.y, p.z);
            NewtonMeshAddNormal(nmesh, n.x, n.y, n.z);
        }
        NewtonMeshEndBuild(nmesh);
        
        newtonCollision = NewtonCreateTreeCollisionFromMesh(world.newtonWorld, nmesh, 0);
        NewtonCollisionSetUserData(newtonCollision, cast(void*)this);
        
        NewtonMeshDestroy(nmesh);
    }
}

class NewtonCompoundShape: NewtonCollisionShape
{
    this(NewtonCollisionShape[] shapes, NewtonPhysicsWorld world)
    {
        super(world);
        newtonCollision = NewtonCreateCompoundCollision(world.newtonWorld, 0);
        NewtonCompoundCollisionBeginAddRemove(newtonCollision);
        foreach(shape; shapes)
        {
            NewtonCompoundCollisionAddSubCollision(newtonCollision, shape.newtonCollision);
        }
        NewtonCompoundCollisionEndAddRemove(newtonCollision);
    }
}

class NewtonRigidBody: Owner
{
    NewtonPhysicsWorld world;
    NewtonBody* newtonBody;
    int materialGroupId;
    float mass;
    Vector3f gravity = Vector3f(0.0f, -9.8f, 0.0f);
    Vector3f force = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f torque = Vector3f(0.0f, 0.0f, 0.0f);
    Vector4f position = Vector4f(0.0f, 0.0f, 0.0f, 1.0f);
    Quaternionf rotation = Quaternionf.identity;
    Matrix4x4f transformation = Matrix4x4f.identity;
    bool enableRotation = true;
    bool raycastable = true;
    bool sensor = false;
    void delegate(NewtonRigidBody, NewtonRigidBody) collisionCallback;

    bool isRaycastable()
    {
        return raycastable;
    }
    
    bool isSensor()
    {
        return sensor;
    }

    this(NewtonCollisionShape shape, float mass, NewtonPhysicsWorld world, Owner o)
    {
        super(o);

        this.world = world;

        newtonBody = NewtonCreateDynamicBody(world.newtonWorld, shape.newtonCollision, transformation.arrayof.ptr);
        NewtonBodySetUserData(newtonBody, cast(void*)this);
        this.groupId = world.defaultGroupId;
        this.mass = mass;
        NewtonBodySetMassProperties(newtonBody, mass, shape.newtonCollision);
        NewtonBodySetForceAndTorqueCallback(newtonBody, &newtonBodyForceCallback);
        
        collisionCallback = &defaultCollisionCallback;
    }
    
    void defaultCollisionCallback(NewtonRigidBody, NewtonRigidBody)
    {
    }

    void update(double dt)
    {
        NewtonBodyGetPosition(newtonBody, position.arrayof.ptr);
        NewtonBodyGetMatrix(newtonBody, transformation.arrayof.ptr);
        if (enableRotation)
        {
            rotation = Quaternionf.fromMatrix(transformation);
        }
        else
        {
            rotation = Quaternionf.identity;
            transformation = translationMatrix(position.xyz);
            NewtonBodySetMatrix(newtonBody, transformation.arrayof.ptr);
        }
        // TODO: enableTranslation
    }
    
    void groupId(int id) @property
    {
        NewtonBodySetMaterialGroupID(newtonBody, id);
        materialGroupId = id;
    }
    
    int groupId() @property
    {
        return materialGroupId;
    }

    void addForce(Vector3f f)
    {
        force += f;
    }

    void addTorque(Vector3f t)
    {
        torque += t;
    }

    void createUpVectorConstraint(Vector3f up)
    {
        NewtonJoint* joint = NewtonConstraintCreateUpVector(world.newtonWorld, up.arrayof.ptr, newtonBody);
    }

    void velocity(Vector3f v) @property
    {
        NewtonBodySetVelocity(newtonBody, v.arrayof.ptr);
    }

    Vector3f velocity() @property
    {
        Vector3f v;
        NewtonBodyGetVelocity(newtonBody, v.arrayof.ptr);
        return v;
    }
    
    void onCollision(NewtonRigidBody otherBody)
    {
        collisionCallback(this, otherBody);
    }
}

class NewtonBodyComponent: EntityComponent
{
    NewtonRigidBody rbody;
    Matrix4x4f prevTransformation;

    this(EventManager em, Entity e, NewtonRigidBody b)
    {
        super(em, e);
        rbody = b;

        Quaternionf rot = e.rotation;
        rbody.transformation =
            translationMatrix(e.position) *
            rot.toMatrix4x4;

        NewtonBodySetMatrix(rbody.newtonBody, rbody.transformation.arrayof.ptr);

        prevTransformation = Matrix4x4f.identity;
    }

    override void update(Time t)
    {
        rbody.update(t.delta);

        entity.prevTransformation = prevTransformation;

        entity.position = rbody.position.xyz;
        entity.transformation = rbody.transformation * scaleMatrix(entity.scaling);
        entity.invTransformation = entity.transformation.inverse;
        entity.rotation = rbody.rotation;

        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;

        prevTransformation = entity.transformation;
    }
}

class NewtonCharacterComponent: EntityComponent
{
    NewtonSphereShape lowerShape;
    NewtonSphereShape upperShape;
    NewtonCompoundShape shape;
    NewtonRigidBody rbody;
    NewtonRigidBody sensorBody;
    float height;
    float mass;
    bool onGround = false;
    Vector3f targetVelocity = Vector3f(0.0f, 0.0f, 0.0f);
    Matrix4x4f prevTransformation;
    float radius;
    float shapeRadius;
    float eyeHeight;
    
    this(EventManager em, Entity e, float height, float mass, NewtonPhysicsWorld world)
    {
        super(em, e);
        this.height = height;
        this.mass = mass;
        radius = height * 0.5f;
        shapeRadius = radius * 0.5f;
        eyeHeight = height * 0.5f;
        lowerShape = New!NewtonSphereShape(shapeRadius, world);
        lowerShape.setTransformation(translationMatrix(Vector3f(0.0f, -shapeRadius, 0.0f)));
        upperShape = New!NewtonSphereShape(shapeRadius, world);
        upperShape.setTransformation(translationMatrix(Vector3f(0.0f, shapeRadius, 0.0f)));
        NewtonCollisionShape[2] shapes = [lowerShape, upperShape];
        shape = New!NewtonCompoundShape(shapes, world);
        
        rbody = world.createDynamicBody(shape, mass);
        rbody.groupId = world.kinematicGroupId;
        rbody.raycastable = false;
        rbody.enableRotation = false;
        
        Quaternionf rot = e.rotation;
        rbody.transformation =
            translationMatrix(e.position) *
            rot.toMatrix4x4;
        NewtonBodySetMatrix(rbody.newtonBody, rbody.transformation.arrayof.ptr);
        prevTransformation = Matrix4x4f.identity;
        
        rbody.createUpVectorConstraint(Vector3f(0.0f, 1.0f, 0.0f));
        rbody.gravity = Vector3f(0.0f, -20.0f, 0.0f);
        
        Vector3f sensorSize = Vector3f(radius, radius * 0.5f, radius);
        auto sensorShape = New!NewtonBoxShape(sensorSize, world);
        sensorBody = world.createDynamicBody(sensorShape, 1.0f);
        sensorBody.groupId = world.sensorGroupId;
        sensorBody.sensor = true;
        sensorBody.collisionCallback = &onSensorCollision;
    }
    
    void onSensorCollision(NewtonRigidBody sensorBody, NewtonRigidBody otherBody)
    {
        onGround = true;
    }
    
    void updateVelocity()
    {
        Vector3f velocityChange = targetVelocity - rbody.velocity;
        velocityChange.y = 0.0f;
        rbody.velocity = rbody.velocity + velocityChange;

        onGround = false;
        auto m = rbody.transformation * translationMatrix(Vector3f(0.0f, -radius, 0.0f));
        NewtonBodySetMatrix(sensorBody.newtonBody, m.arrayof.ptr);

        targetVelocity = Vector3f(0.0f, 0.0f, 0.0f);
    }
    
    override void update(Time t)
    {
        rbody.update(t.delta);

        entity.prevTransformation = prevTransformation;

        entity.position = rbody.position.xyz;
        entity.transformation = rbody.transformation * scaleMatrix(entity.scaling);
        entity.invTransformation = entity.transformation.inverse;
        entity.rotation = rbody.rotation;

        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;

        prevTransformation = entity.transformation;
    }
    
    void move(Vector3f direction, float speed)
    {
        targetVelocity += direction * speed;
    }
    
    void jump(float height)
    {
        if (onGround)
        {
            float jumpSpeed = sqrt(2.0f * height * -rbody.gravity.y);
            Vector3f v = rbody.velocity;
            v.y = jumpSpeed;
            rbody.velocity = v;
            onGround = false;
        }
    }
    
    void duck()
    {
        // TODO
        //eyeHeight = 0.0f;
    }
    
    void unduck()
    {
        // TODO
        //eyeHeight = height * 0.5f;
    }
    
    Vector3f position()
    {
        return rbody.position.xyz;
    }
    
    Vector3f eyePoint()
    {
        return rbody.position.xyz + Vector3f(0.0f, eyeHeight, 0.0f);
    }
}
